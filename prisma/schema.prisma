// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  clerkUserId String?  @unique
  email       String   @unique
  name        String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  videos      Video[]
  role        String   @default("student") // "student" or "teacher"
  // Gamification fields
  points      Int      @default(0)
  level       Int      @default(1)
  streak      Int      @default(0)
  lastActive  DateTime @default(now())
  badges      UserBadge[]
  quizResults QuizResult[]
  achievements UserAchievement[]
  videoProgress VideoProgress[]
}

model Video {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  content     String   // The lesson content used to generate the video
  videoUrl    String?  // URL to the generated video
  language    String   @default("en")
  avatarId    String?  // The ID of the avatar used
  status      String   @default("pending") // "pending", "processing", "completed", "failed"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  watchedBy   VideoProgress[]
}

model Avatar {
  id          Int     @id @default(autoincrement())
  name        String
  avatarId    String  @unique // D-ID avatar ID
  thumbnailUrl String?
  isCustom    Boolean @default(false)
}

// New model for contact form submissions
model Contact {
  id          Int       @id @default(autoincrement())
  name        String
  email       String
  subject     String
  message     String
  newsletter  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  status      String    @default("unread") // unread, read, replied
}

// Gamification models
model Badge {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String
  imageUrl    String
  criteria    String     // Describes how to earn the badge
  points      Int        @default(10)
  users       UserBadge[]
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  badge     Badge    @relation(fields: [badgeId], references: [id])
  badgeId   Int
  earnedAt  DateTime @default(now())

  @@unique([userId, badgeId])
}

model Achievement {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String
  imageUrl    String
  criteria    String     // Describes how to earn the achievement
  points      Int        @default(25)
  users       UserAchievement[]
}

model UserAchievement {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId Int
  earnedAt      DateTime    @default(now())

  @@unique([userId, achievementId])
}

model Quiz {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  difficulty  String      // "easy", "medium", "hard"
  points      Int         @default(10)
  questions   Question[]
  results     QuizResult[]
  createdAt   DateTime    @default(now())
}

model Question {
  id          Int         @id @default(autoincrement())
  quiz        Quiz        @relation(fields: [quizId], references: [id])
  quizId      Int
  text        String
  options     Json        // Array of possible answers
  correctOption Int       // Index of the correct answer
}

model QuizResult {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  quiz        Quiz      @relation(fields: [quizId], references: [id])
  quizId      Int
  score       Int
  maxScore    Int
  completedAt DateTime  @default(now())

  @@unique([userId, quizId])
}

model VideoProgress {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  video       Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId     Int
  progress    Float     @default(0) // Percentage watched (0-100)
  completed   Boolean   @default(false)
  lastWatched DateTime  @default(now())
  
  @@unique([userId, videoId])
}